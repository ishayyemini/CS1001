from hw2_322868852 import *


def main():
    my_awesome_testing()


def my_awesome_testing():
    """just run and enjoy"""
    test_q1()
    test_q2()
    test_q3()
    test_q4()
    test_q5()
    print("All rights preserved for JY.inc")
    input()


def test_q1():
    # aleph
    assert divisors(0) == []
    assert divisors(1) == []
    assert divisors(6) == [1, 2, 3]
    assert divisors(7) == [1]
    assert divisors(20) == [1, 2, 4, 5, 10]
    assert divisors(9) == [1, 3]
    assert divisors(21) == [1, 3, 7]
    assert divisors(10000) == [
        1,
        2,
        4,
        5,
        8,
        10,
        16,
        20,
        25,
        40,
        50,
        80,
        100,
        125,
        200,
        250,
        400,
        500,
        625,
        1000,
        1250,
        2000,
        2500,
        5000,
    ]
    # beit
    assert perfect_numbers(1) == [6]
    assert perfect_numbers(2) == [6, 28]
    assert perfect_numbers(3) == [6, 28, 496]
    assert perfect_numbers(4) == [6, 28, 496, 8128]

    # hei
    for num in semi_perfect_numbers:
        assert semi_perfect_4(num)

    print("you past the first question!")


def test_q2():
    # aleph
    assert type(coin()) is bool

    # beit
    for _ in range(10):
        assert roll_dice(10) in list(range(1, 11))

    # gimel
    for num in range(10):
        for parity in ["even", "odd"]:
            what_we_got = roulette(num, parity)
            assert what_we_got == num * 2 or what_we_got == 0

    # daled
    for bet_size in range(10):
        for _ in ["even", "odd"]:
            n = 100
            gain = roulette_repeat(bet_size, n)
            assert -1 * bet_size * n <= gain <= bet_size * n

    # hei
    assert shuffle_list([]) == []
    for top_num in range(10):
        for_shuffle = list(range(top_num))
        assert set(shuffle_list(for_shuffle)) == set(list(range(top_num)))

    print("you past the second question!")


def test_q3():
    # aleph
    assert inc("10101010") == "10101011"
    assert inc("0") == "1"
    assert inc("11110101111") == "11110110000"
    assert inc("1") == "10"

    # beit
    assert add("11110101111", "101011101") == "100100001100"
    assert add("101010111101", "100000001") == "101110111110"
    assert add("1111", "11") == "10010"

    # gimel
    assert pow_two("11110101111", 3) == "11110101111000"
    assert pow_two("1101011011", 5) == "110101101100000"
    assert pow_two("0", 10) == "0"

    # daled
    assert div_two("1101011011", 5) == "11010"
    assert div_two("1101101", 2) == "11011"
    assert div_two("0", 3) == "0"
    assert div_two("1", 3) == "0"

    # hei
    assert leq("1", "1")
    assert leq("1", "11")
    assert not leq("1111111111", "1")
    assert leq("10111", "111111111")

    # vav
    assert to_decimal("1101101") == 109
    assert to_decimal("11010111101") == 1725
    assert to_decimal("0") == 0

    print("you past the third question!")


def test_q4():
    # aleph
    assert lychrel_loops(28) == 2
    assert lychrel_loops(1) == 1
    assert lychrel_loops(10) == 1
    assert lychrel_loops(110) == 1
    assert lychrel_loops(22) == 1

    # beit
    assert is_lychrel_suspect(28, 1)
    assert not is_lychrel_suspect(28, 2)

    # gimel
    assert lychrel_sort(list(range(1000)), 3) == test_sorted_list
    print("you past the fourth question!")


test_sorted_list = [
    0,
    1,
    2,
    3,
    4,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    38,
    40,
    41,
    42,
    43,
    44,
    45,
    47,
    50,
    51,
    52,
    53,
    54,
    56,
    60,
    61,
    62,
    63,
    65,
    70,
    71,
    72,
    74,
    80,
    81,
    83,
    90,
    92,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    308,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    320,
    321,
    322,
    323,
    324,
    325,
    326,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    340,
    341,
    342,
    343,
    344,
    345,
    346,
    400,
    401,
    402,
    403,
    404,
    405,
    407,
    410,
    411,
    412,
    413,
    414,
    415,
    420,
    421,
    422,
    423,
    424,
    425,
    430,
    431,
    432,
    433,
    434,
    435,
    440,
    441,
    442,
    443,
    444,
    445,
    500,
    501,
    502,
    503,
    504,
    506,
    510,
    511,
    512,
    513,
    514,
    520,
    521,
    522,
    523,
    524,
    530,
    531,
    532,
    533,
    534,
    540,
    541,
    542,
    543,
    544,
    600,
    601,
    602,
    603,
    605,
    610,
    611,
    612,
    613,
    620,
    621,
    622,
    623,
    630,
    631,
    632,
    633,
    640,
    641,
    642,
    643,
    700,
    701,
    702,
    704,
    710,
    711,
    712,
    720,
    721,
    722,
    730,
    731,
    732,
    740,
    741,
    742,
    800,
    801,
    803,
    810,
    811,
    820,
    821,
    830,
    831,
    840,
    841,
    900,
    902,
    910,
    920,
    930,
    940,
    5,
    6,
    7,
    8,
    9,
    19,
    28,
    37,
    39,
    46,
    48,
    49,
    55,
    57,
    58,
    64,
    66,
    67,
    73,
    75,
    76,
    82,
    84,
    85,
    91,
    93,
    94,
    109,
    119,
    129,
    139,
    149,
    150,
    151,
    152,
    153,
    154,
    159,
    160,
    161,
    162,
    163,
    169,
    170,
    171,
    172,
    173,
    179,
    189,
    208,
    218,
    219,
    228,
    229,
    238,
    239,
    248,
    250,
    251,
    252,
    253,
    258,
    259,
    260,
    261,
    262,
    268,
    269,
    270,
    271,
    272,
    278,
    279,
    288,
    289,
    307,
    309,
    317,
    318,
    319,
    327,
    328,
    329,
    337,
    338,
    339,
    347,
    350,
    351,
    352,
    357,
    358,
    359,
    360,
    361,
    367,
    368,
    369,
    370,
    371,
    377,
    378,
    379,
    387,
    388,
    406,
    408,
    409,
    416,
    417,
    418,
    419,
    426,
    427,
    428,
    429,
    436,
    437,
    438,
    446,
    450,
    451,
    456,
    457,
    458,
    459,
    460,
    466,
    467,
    468,
    469,
    470,
    476,
    477,
    478,
    479,
    486,
    487,
    505,
    507,
    508,
    509,
    515,
    516,
    517,
    518,
    519,
    525,
    526,
    527,
    528,
    529,
    535,
    536,
    537,
    545,
    550,
    555,
    556,
    557,
    558,
    559,
    565,
    566,
    567,
    568,
    569,
    575,
    576,
    577,
    578,
    585,
    586,
    604,
    606,
    607,
    608,
    609,
    614,
    615,
    616,
    617,
    618,
    619,
    624,
    625,
    626,
    627,
    628,
    634,
    635,
    636,
    644,
    654,
    655,
    656,
    657,
    658,
    659,
    664,
    665,
    666,
    667,
    668,
    669,
    674,
    675,
    676,
    677,
    684,
    685,
    703,
    705,
    706,
    707,
    708,
    709,
    713,
    714,
    715,
    716,
    717,
    718,
    719,
    723,
    724,
    725,
    726,
    727,
    733,
    734,
    735,
    743,
    753,
    754,
    755,
    756,
    757,
    758,
    759,
    763,
    764,
    765,
    766,
    767,
    768,
    773,
    774,
    775,
    776,
    783,
    784,
    802,
    804,
    805,
    806,
    807,
    808,
    809,
    812,
    813,
    814,
    815,
    816,
    817,
    818,
    822,
    823,
    824,
    825,
    826,
    832,
    833,
    834,
    842,
    852,
    853,
    854,
    855,
    856,
    857,
    858,
    859,
    862,
    863,
    864,
    865,
    866,
    867,
    872,
    873,
    874,
    875,
    882,
    883,
    901,
    903,
    904,
    905,
    906,
    907,
    908,
    909,
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    921,
    922,
    923,
    924,
    925,
    931,
    932,
    933,
    941,
    951,
    952,
    953,
    954,
    955,
    956,
    957,
    958,
    961,
    962,
    963,
    964,
    965,
    966,
    971,
    972,
    973,
    974,
    981,
    982,
    59,
    68,
    77,
    86,
    95,
    155,
    156,
    157,
    158,
    164,
    165,
    168,
    178,
    180,
    184,
    185,
    186,
    194,
    199,
    249,
    254,
    255,
    256,
    257,
    263,
    264,
    267,
    277,
    283,
    284,
    285,
    293,
    298,
    299,
    348,
    349,
    353,
    354,
    355,
    356,
    362,
    363,
    366,
    376,
    382,
    383,
    384,
    389,
    392,
    397,
    398,
    399,
    439,
    447,
    448,
    449,
    452,
    453,
    454,
    455,
    461,
    462,
    465,
    475,
    481,
    482,
    483,
    488,
    489,
    491,
    496,
    497,
    498,
    499,
    538,
    546,
    547,
    548,
    551,
    552,
    553,
    554,
    560,
    561,
    564,
    574,
    580,
    581,
    582,
    587,
    588,
    590,
    595,
    596,
    597,
    598,
    637,
    645,
    646,
    647,
    650,
    651,
    652,
    653,
    660,
    663,
    673,
    680,
    681,
    686,
    687,
    694,
    695,
    696,
    697,
    736,
    744,
    745,
    746,
    750,
    751,
    752,
    762,
    772,
    780,
    785,
    786,
    793,
    794,
    795,
    796,
    835,
    843,
    844,
    845,
    850,
    851,
    861,
    871,
    884,
    885,
    892,
    893,
    894,
    895,
    934,
    942,
    943,
    944,
    950,
    960,
    970,
    983,
    984,
    991,
    992,
    993,
    994,
    69,
    78,
    79,
    87,
    88,
    89,
    96,
    97,
    98,
    99,
    166,
    167,
    174,
    175,
    176,
    177,
    181,
    182,
    183,
    187,
    188,
    190,
    191,
    192,
    193,
    195,
    196,
    197,
    198,
    265,
    266,
    273,
    274,
    275,
    276,
    280,
    281,
    282,
    286,
    287,
    290,
    291,
    292,
    294,
    295,
    296,
    297,
    364,
    365,
    372,
    373,
    374,
    375,
    380,
    381,
    385,
    386,
    390,
    391,
    393,
    394,
    395,
    396,
    463,
    464,
    471,
    472,
    473,
    474,
    480,
    484,
    485,
    490,
    492,
    493,
    494,
    495,
    539,
    549,
    562,
    563,
    570,
    571,
    572,
    573,
    579,
    583,
    584,
    589,
    591,
    592,
    593,
    594,
    599,
    629,
    638,
    639,
    648,
    649,
    661,
    662,
    670,
    671,
    672,
    678,
    679,
    682,
    683,
    688,
    689,
    690,
    691,
    692,
    693,
    698,
    699,
    728,
    729,
    737,
    738,
    739,
    747,
    748,
    749,
    760,
    761,
    769,
    770,
    771,
    777,
    778,
    779,
    781,
    782,
    787,
    788,
    789,
    790,
    791,
    792,
    797,
    798,
    799,
    819,
    827,
    828,
    829,
    836,
    837,
    838,
    839,
    846,
    847,
    848,
    849,
    860,
    868,
    869,
    870,
    876,
    877,
    878,
    879,
    880,
    881,
    886,
    887,
    888,
    889,
    890,
    891,
    896,
    897,
    898,
    899,
    918,
    919,
    926,
    927,
    928,
    929,
    935,
    936,
    937,
    938,
    939,
    945,
    946,
    947,
    948,
    949,
    959,
    967,
    968,
    969,
    975,
    976,
    977,
    978,
    979,
    980,
    985,
    986,
    987,
    988,
    989,
    990,
    995,
    996,
    997,
    998,
    999,
]


def test_q5():
    # aleph
    assert [100] == calculate_grades_v1([(100, (0, 0, 0))])
    assert [90.4] == calculate_grades_v1([(90, (92, 95, 95))])
    assert [90] == calculate_grades_v1([(90, (90, 90, 90))])

    # beit
    grades = [(90, (92, 95, 95))]
    w = 0.82
    assert (
        abs(93.18 - calculate_grades_v2(grades, w, lambda x: min(100, x + 3))[0])
        < 0.000001
    )

    for working_number in range(50):
        grades = [
            (random.random() * 100, tuple(random.random() * 100 for _ in range(3)))
            for _ in range(10)
        ]
        for final_grade in calculate_grades_v2(
            grades, w, lambda x: min(100, x + working_number)
        ):
            assert 0 <= final_grade <= 100

    # gimel i
    for working_number in range(50):
        grades = [
            (random.random() * 100, tuple(random.random() * 100 for _ in range(3)))
            for _ in range(10)
        ]
        for final_grade in calculate_grades_v3(grades, w):
            assert 0 <= final_grade <= 100

    # gimel ii
    grades = [(90, tuple(85 for _ in range(3))) for _ in range(5)]
    target = 90
    assert calculate_w(grades, target) == 1

    target = 93
    assert calculate_w(grades, target) is None

    target = 87
    assert 0 <= calculate_w(grades, target) <= 1

    grades = [(90, (90, 90, 90))]
    target = 89
    assert calculate_w(grades, target) is None

    target = 90
    assert 0 <= calculate_w(grades, target) <= 1

    print("You did it!")


semi_perfect_numbers = [
    12,
    18,
    20,
    24,
    30,
    36,
    40,
    42,
    48,
    54,
    60,
    72,
    80,
    84,
    90,
    96,
    100,
    108,
    120,
    126,
    132,
    140,
    144,
    150,
    156,
    160,
    162,
    168,
    180,
    192,
    198,
    200,
    204,
    210,
    216,
    220,
    228,
    234,
    240,
    252,
    260,
    264,
    270,
    276,
    280,
    288,
    294,
    300,
    306,
    312,
    320,
    324,
    330,
    336,
    340,
    342,
    348,
    360,
    372,
    378,
    380,
    384,
    390,
    396,
    400,
    408,
    414,
    420,
    432,
    440,
    444,
    450,
    456,
    460,
    462,
    468,
    480,
    486,
    492,
    500,
    504,
    510,
    516,
    520,
    522,
    528,
    540,
    546,
    552,
    558,
    560,
    564,
    570,
    576,
    580,
    588,
    594,
    600,
    612,
    620,
    624,
    630,
    636,
    640,
    648,
    660,
    666,
    672,
    680,
    684,
    690,
    696,
    700,
    702,
    708,
    714,
    720,
    732,
    738,
    740,
    744,
    750,
    756,
    760,
    768,
    774,
    780,
    792,
    798,
    800,
    804,
    810,
    816,
    820,
    828,
    840,
    846,
    852,
    860,
    864,
    870,
    876,
    880,
    882,
    888,
    900,
    912,
    918,
    920,
    924,
    930,
    936,
    940,
    948,
    954,
    960,
    966,
    972,
    980,
    984,
    990,
    996,
]

if __name__ == "__main__":
    main()
